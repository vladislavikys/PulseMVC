//
//  ManagerHeartRate.swift
//  PulseMVC
//
//  Created by vlad zarya on 29.03.24.
//

import Foundation
import AVFoundation
import UIKit

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–∞–º–µ—Ä—ã (–ø–µ—Ä–µ–¥–Ω—è—è –∏–ª–∏ –∑–∞–¥–Ω—è—è)
enum CameraType: Int {
    case back
    case front
    
    func captureDevice() -> AVCaptureDevice {
        switch self {
        case .front:
            // –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –ø–µ—Ä–µ–¥–Ω–µ–π –∫–∞–º–µ—Ä–æ–π
            let devices = AVCaptureDevice.DiscoverySession(deviceTypes: [], mediaType: AVMediaType.video, position: .front).devices
            print("devices:\(devices)")
            for device in devices where device.position == .front {
                return device
            }
        default:
            break
        }
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–¥–Ω—é—é –∫–∞–º–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back)!
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –≤–∏–¥–µ–æ
struct VideoSpec {
    var fps: Int32?
    var size: CGSize?
}

// –ü—Å–µ–≤–¥–æ–Ω–∏–º —Ç–∏–ø–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±—É—Ñ–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
typealias ImageBufferHandler = ((_ imageBuffer: CMSampleBuffer) -> ())

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –ø—É–ª—å—Å–∞
class HeartRateManager: NSObject {
    private let captureSession = AVCaptureSession()
    private var videoDevice: AVCaptureDevice!
    private var videoConnection: AVCaptureConnection!
    private var previewLayer: AVCaptureVideoPreviewLayer?
    var errorCompletion: (() -> ())?
    var imageBufferHandler: ImageBufferHandler?
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∫–∞–º–µ—Ä—ã, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –≤–∏–¥–µ–æ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    init(cameraType: CameraType, preferredSpec: VideoSpec?, previewContainer: CALayer?) {
        super.init()
        videoDevice = cameraType.captureDevice()
        
        // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–¥–µ–æ
        do {
            captureSession.sessionPreset = .low
            if let preferredSpec = preferredSpec {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º FPS
                videoDevice.updateFormatWithPreferredVideoSpec(preferredSpec: preferredSpec)
            }
        }
        
        // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
        let videoDeviceInput: AVCaptureDeviceInput
        do {
            videoDeviceInput = try AVCaptureDeviceInput(device: videoDevice)
        } catch  {
            // MARK: - –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò, –ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –†–ê–ó–†–ï–®–ò–õ –î–û–°–¢–£–ü –ö –ö–ê–ú–ï–†–ï
            //errorCompletion?()
            fatalError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä AVCaptureDeviceInput —Å –æ—à–∏–±–∫–æ–π: \(error).")
        }
        guard captureSession.canAddInput(videoDeviceInput) else { fatalError() }
        captureSession.addInput(videoDeviceInput)
        
        // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if let previewContainer = previewContainer {
            let previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
            previewLayer.frame = previewContainer.bounds
            previewLayer.contentsGravity = CALayerContentsGravity.resizeAspectFill
            previewLayer.videoGravity = AVLayerVideoGravity.resizeAspectFill
            previewContainer.insertSublayer(previewLayer, at: 0)
            self.previewLayer = previewLayer
        }
        
        // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ –≤–∏–¥–µ–æ
        let videoDataOutput = AVCaptureVideoDataOutput()
        videoDataOutput.videoSettings = [kCVPixelBufferPixelFormatTypeKey : NSNumber(value: kCVPixelFormatType_32BGRA)] as [String : Any]
        videoDataOutput.alwaysDiscardsLateVideoFrames = true
        let queue = DispatchQueue(label: "com.covidsense.videosamplequeue")
        videoDataOutput.setSampleBufferDelegate(self, queue: queue)
        guard captureSession.canAddOutput(videoDataOutput) else {
            fatalError()
        }
        captureSession.addOutput(videoDataOutput)
        videoConnection = videoDataOutput.connection(with: .video)
    }
    
    // –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ
    func startCapture() {
        #if DEBUG
        print(#function + "\(self.classForCoder)/")
        #endif
        if captureSession.isRunning {
            #if DEBUG
            print("–°–µ—Å—Å–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ üèÉ‚Äç‚ôÇÔ∏è.")
            #endif
            return
        }
        captureSession.startRunning()
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ
    func stopCapture() {
        #if DEBUG
        print(#function + "\(self.classForCoder)/")
        #endif
        if !captureSession.isRunning {
            #if DEBUG
            print("–°–µ—Å—Å–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ üõë.")
            #endif
            return
        }
        captureSession.stopRunning()
    }
}

extension HeartRateManager: AVCaptureVideoDataOutputSampleBufferDelegate {
    // MARK: - –≠–∫—Å–ø–æ—Ä—Ç –±—É—Ñ–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≤–∏–¥–µ–æ–∫–∞–¥—Ä–∞
    func captureOutput(_ output: AVCaptureOutput, didOutput sampleBuffer: CMSampleBuffer, from connection: AVCaptureConnection) {
        if connection.videoOrientation != .portrait {
            connection.videoOrientation = .portrait
            return
        }
        if let imageBufferHandler = imageBufferHandler {
            imageBufferHandler(sampleBuffer)
        }
    }
}


