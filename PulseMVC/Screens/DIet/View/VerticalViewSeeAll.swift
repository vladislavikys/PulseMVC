import UIKit
import CoreData

// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–µ–ª–µ–≥–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏–π
protocol VerticalViewSeeAllDelegate: AnyObject {
    func didTapBack() // –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    func didSelectRecipe(at index: Int) // –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ—Ü–µ–ø—Ç–∞
}

class VerticalViewSeeAll: UIView {

    weak var delegate: VerticalViewSeeAllDelegate?
    var category: String? // –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private var recipes: [Recipes] = [] // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    
    // –ú–µ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    let titleLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 36, weight: .bold)
        label.text = "Title"
        label.textAlignment = .center
        return label
    }()
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    let backButton: UIButton = {
        let button = UIButton(type: .system)
        button.setImage(UIImage(named:"back"), for: .normal)
        button.tintColor = UIColor.black
        button.imageView?.contentMode = .scaleAspectFit
        button.addTarget(self, action: #selector(backButtonTapped), for: .touchUpInside)
        return button
    }()
    
    // –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        let itemWidth = (UIScreen.main.bounds.width - 30 - 20) / 2 // –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –¥–ª—è –¥–≤—É—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        layout.itemSize = CGSize(width: itemWidth, height: 160) // –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–π–∫–∏
        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)
        layout.minimumInteritemSpacing = 10
        layout.minimumLineSpacing = 10
        
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .clear
        collectionView.showsVerticalScrollIndicator = false
        collectionView.register(Cell.self, forCellWithReuseIdentifier: "cell") // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫—É
        collectionView.dataSource = self
        collectionView.delegate = self
        return collectionView
    }()
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupViews() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        setupSwipeGesture() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø-–∂–µ—Å—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    private func setupViews() {
        addSubview(titleLabel)
        addSubview(backButton)
        addSubview(collectionView)
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        backButton.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(70)
            make.leading.equalToSuperview().offset(20)
            make.width.height.equalTo(20)
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        titleLabel.snp.makeConstraints { make in
            make.top.equalTo(backButton.snp.bottom).offset(16)
            make.leading.equalToSuperview().offset(20)
            make.height.equalTo(30)
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        collectionView.snp.makeConstraints { make in
            make.top.equalTo(titleLabel.snp.bottom).offset(22)
            make.leading.trailing.equalToSuperview().inset(10)
            make.bottom.equalToSuperview().offset(-10)
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    func setTitle(_ title: String) {
        titleLabel.text = title
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    @objc private func backButtonTapped() {
        delegate?.didTapBack() // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–µ–ª–µ–≥–∞—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    func loadRecipes() {
        guard let category = category else {
            // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
            return
        }
        
        let fetchRequest: NSFetchRequest<Recipes> = Recipes.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "category == %@", category)
        
        do {
            recipes = try CoreDataeManager.shared.context.fetch(fetchRequest) // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            collectionView.reloadData() // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        } catch {
            print("Failed to fetch recipes for category \(category): \(error)")
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø-–∂–µ—Å—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    private func setupSwipeGesture() {
        let swipeGesture = UIScreenEdgePanGestureRecognizer(target: self, action: #selector(handleSwipeGesture(_:)))
        swipeGesture.edges = .left // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–∞–π–ø–∞ —Å –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —ç–∫—Ä–∞–Ω–∞
        self.addGestureRecognizer(swipeGesture) // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–∞–π–ø-–∂–µ—Å—Ç–∞ –∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–∞–π–ø-–∂–µ—Å—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    @objc private func handleSwipeGesture(_ gesture: UIScreenEdgePanGestureRecognizer) {
        if gesture.state == .ended {
            delegate?.didTapBack() // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–µ–ª–µ–≥–∞—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–≤–∞–π–ø–∞
        }
    }
}

extension VerticalViewSeeAll: UICollectionViewDataSource, UICollectionViewDelegate {
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return recipes.count
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è—á–µ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as? Cell else {
            fatalError("Unable to dequeue Cell")
        }
        
        let recipe = recipes[indexPath.row]
        cell.nameLabel.text = recipe.name // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
        cell.caloriesLabel.text = "üî• \(recipe.calories)kcal" // –ö–∞–ª–æ—Ä–∏–∏
        cell.timeLabel.text = "‚è∞ \(recipe.cooking_time)min" // –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        cell.recipeImageView.image = UIImage(named: "\(String(recipe.photo!))") // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
        
        return cell
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è—á–µ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        delegate?.didSelectRecipe(at: indexPath.row) // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–µ–ª–µ–≥–∞—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ—Ü–µ–ø—Ç–∞
    }
}
