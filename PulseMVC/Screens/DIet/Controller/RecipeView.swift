import UIKit
import SnapKit

class RecipeView: UIViewController {

    // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ üé®
    var recipeNameView = NameView()
    var recipeImageView = UIImageView()
    var proteinIndicator = CircularProgressView()
    let proteinIndicatorText = UILabel()
    var fatIndicator = CircularProgressView()
    let fatIndicatorText = UILabel()
    var carbsIndicator = CircularProgressView()
    let carbsIndicatorText = UILabel()
    var scrollView = UIScrollView()
    private let backButton = UIButton(type: .system)

    // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ üç≤
    private var recipe: Recipes

    // –°–æ–∑–¥–∞–µ–º stackView –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∞ üìö
    private let nutrientStackView = UIStackView()

    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π stackView –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ scrollView üìú
    private let contentStackView = UIStackView()
    private let ingredientsStackView = UIStackView()
    private let instructionsStackView = UIStackView()

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Ä–µ—Ü–µ–ø—Ç–æ–º ü•ó
    init(recipe: Recipes) {
        self.recipe = recipe
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // –ö–æ–≥–¥–∞ –≤–∏–¥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è üîÑ
    override func viewDidLoad() {
        super.viewDidLoad()
        setupViews()        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥
        setupConstraints()  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        updateUI()          // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞
        setupIngredientList() // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        setupInstructions() // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–∫–µ
        printIngredients()  // –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å üñ®Ô∏è
    }

    private func setupViews() {
        view.backgroundColor = .white // –ë–µ–ª—ã–π —Ñ–æ–Ω üé®

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ üîô
        backButton.setImage(UIImage(named: "back"), for: .normal)
        backButton.tintColor = UIColor.black
        backButton.imageView?.contentMode = .scaleAspectFit
        backButton.addTarget(self, action: #selector(backButtonTapped), for: .touchUpInside)

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–∏–¥ üèóÔ∏è
        view.addSubview(scrollView)
        scrollView.addSubview(contentStackView)
        scrollView.addSubview(recipeNameView) // –î–æ–±–∞–≤–ª—è–µ–º recipeNameView –≤ scrollView, –∞ –Ω–µ –≤ contentStackView
        contentStackView.addArrangedSubview(recipeImageView)
        contentStackView.addArrangedSubview(nutrientStackView)
        contentStackView.addArrangedSubview(ingredientsStackView)
        contentStackView.addArrangedSubview(instructionsStackView)
        view.addSubview(backButton)

        recipeImageView.contentMode = .scaleAspectFill
        

        setupNutrientIndicators() // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ üìä

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º contentStackView üìö
        contentStackView.axis = .vertical
        contentStackView.spacing = 20
        contentStackView.alignment = .fill

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ingredientsStackView ü•ï
        ingredientsStackView.axis = .vertical
        ingredientsStackView.spacing = 5
        ingredientsStackView.alignment = .fill
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º instructionsStackView üìú
        instructionsStackView.axis = .vertical
        instructionsStackView.spacing = 10
        instructionsStackView.alignment = .fill
    }

    private func setupNutrientIndicators() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ stackView –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ üçΩÔ∏è
        nutrientStackView.axis = .horizontal
        nutrientStackView.spacing = 5
        nutrientStackView.alignment = .center
        nutrientStackView.distribution = .equalSpacing

        let indicators: [(CircularProgressView, String)] = [
            (proteinIndicator, "Protein"),
            (fatIndicator, "Fat"),
            (carbsIndicator, "Carbs")
        ]

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ª–∏–Ω–∏–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators.forEach { $0.0.lineWidth = 5 }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –µ–≥–æ –º–µ—Ç–∫—É –≤ —Å—Ç–µ–∫ üèóÔ∏è
        for (indicator, title) in indicators {
            let titleLabel = UILabel()
            titleLabel.text = title
            titleLabel.textAlignment = .center
            titleLabel.numberOfLines = 1
            titleLabel.font = UIFont.systemFont(ofSize: 16, weight: .medium)

            let valueLabel = UILabel()
            valueLabel.textAlignment = .center
            valueLabel.numberOfLines = 1
            valueLabel.textColor = .gray
            valueLabel.font = UIFont.systemFont(ofSize: 14)

            let stackViewItem = UIStackView()
            stackViewItem.axis = .vertical
            stackViewItem.spacing = 8
            stackViewItem.alignment = .center
            stackViewItem.addArrangedSubview(indicator)
            stackViewItem.addArrangedSubview(titleLabel)
            stackViewItem.addArrangedSubview(valueLabel)

            indicator.snp.makeConstraints { make in
                make.width.height.equalTo(60) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            }

            nutrientStackView.addArrangedSubview(stackViewItem)

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            if indicator == proteinIndicator {
                valueLabel.text = "\(recipe.protein)g"
            } else if indicator == fatIndicator {
                valueLabel.text = "\(recipe.fat)g"
            } else if indicator == carbsIndicator {
                valueLabel.text = "\(recipe.carbohydrates)g"
            }
        }
    }

    private func setupConstraints() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ üõ†Ô∏è
        backButton.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(20)
            make.leading.equalToSuperview().offset(20)
            make.width.height.equalTo(40)
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è scrollView üìú
        scrollView.snp.makeConstraints { make in
            make.edges.equalTo(view.safeAreaLayoutGuide)
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è contentStackView üìö
        contentStackView.snp.makeConstraints { make in
            make.edges.equalTo(scrollView)
            make.width.equalTo(scrollView)
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ üì∏
        recipeImageView.snp.makeConstraints { make in
            make.height.equalTo(250)
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ üìú
        recipeNameView.snp.makeConstraints { make in
            make.top.equalTo(recipeImageView.snp.bottom).offset(-45)
            make.height.equalTo(130)
            make.width.equalTo(320)
            make.centerX.equalTo(scrollView)
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è nutrientStackView üçΩÔ∏è
        nutrientStackView.snp.makeConstraints { make in
            make.top.equalTo(recipeNameView.snp.bottom).offset(40)
            make.height.equalTo(120)
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è ingredientsStackView ü•ï
        ingredientsStackView.snp.makeConstraints { make in
            make.top.equalTo(nutrientStackView.snp.bottom).offset(40)
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è instructionsStackView üìú
        instructionsStackView.snp.makeConstraints { make in
            make.top.equalTo(ingredientsStackView.snp.bottom).offset(40)
        }
    }


    private func updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞ üìã
        recipeNameView.name = recipe.name ?? "No Name"
        recipeNameView.opinion = recipe.descript ?? "No Opinion"
        recipeNameView.kcal = Int(recipe.calories)
        recipeNameView.min = Int(recipe.cooking_time)
        recipeNameView.serv = Int(recipe.servings)

        recipeImageView.image = UIImage(named: "\(String(recipe.photo ?? ""))")

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫—Ä—É–≥–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ üéØ
        let totalNutrients = Float(recipe.protein + recipe.fat + recipe.carbohydrates)
        
        if totalNutrients > 0 {
            proteinIndicator.progress = Float(recipe.protein) / totalNutrients
            fatIndicator.progress = Float(recipe.fat) / totalNutrients
            carbsIndicator.progress = Float(recipe.carbohydrates) / totalNutrients
        } else {
            proteinIndicator.progress = 0
            fatIndicator.progress = 0
            carbsIndicator.progress = 0
        }
    }

    private func setupIngredientList() {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ü•ï
        let ingredientsTitle = UILabel()
        ingredientsTitle.text = "Ingredient list"
        ingredientsTitle.font = UIFont.boldSystemFont(ofSize: 18)
        ingredientsStackView.addArrangedSubview(ingredientsTitle)

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Å—Ç–µ–∫ üìú
        guard let ingredientDetails = recipe.ingredientDetails else { return }
        for (ingredient, quantity) in ingredientDetails {
            let label = UILabel()
            label.text = formatIngredientText(ingredient: ingredient, quantity: quantity)
            label.font = UIFont.systemFont(ofSize: 16)
            label.textColor = .black
            label.textAlignment = .left
            ingredientsStackView.addArrangedSubview(label)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –ø–æ 25 –ø—É–Ω–∫—Ç–æ–≤
        ingredientsStackView.layoutMargins = UIEdgeInsets(top: 0, left: 25, bottom: 0, right: 25)
        ingredientsStackView.isLayoutMarginsRelativeArrangement = true
    }

    private func setupInstructions() {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –≥–æ—Ç–æ–≤–∫–µ üìú
        let instructionsTitle = UILabel()
        instructionsTitle.text = "Cooking Instructions"
        instructionsTitle.font = UIFont.boldSystemFont(ofSize: 18)
        instructionsStackView.addArrangedSubview(instructionsTitle)

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Å—Ç–µ–∫ üìú
        guard let instructionsText = recipe.instructions else { return }
        let instructionsLabel = UILabel()
        instructionsLabel.text = instructionsText
        instructionsLabel.font = UIFont.systemFont(ofSize: 16)
        instructionsLabel.textColor = .black
        instructionsLabel.numberOfLines = 0
        instructionsStackView.addArrangedSubview(instructionsLabel)

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –ø–æ 25 –ø—É–Ω–∫—Ç–æ–≤
        instructionsStackView.layoutMargins = UIEdgeInsets(top: 0, left: 25, bottom: 0, right: 25)
        instructionsStackView.isLayoutMarginsRelativeArrangement = true
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ üîô
    @objc private func backButtonTapped() {
        dismiss(animated: true, completion: nil)
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å üñ®Ô∏è
    private func printIngredients() {
        print("Ingredients for recipe: \(recipe.name ?? "No Name")")
        guard let ingredientDetails = recipe.ingredientDetails else {
            print("No ingredients found.")
            return
        }
        for (ingredient, quantity) in ingredientDetails {
            print("\(ingredient): \(quantity)")
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å —Ç–æ—á–∫–∞–º–∏ üü¢
    private func formatIngredientText(ingredient: String, quantity: String) -> String {
        let totalWidth = Int(view.bounds.width) - 40 // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
        let font = UIFont.systemFont(ofSize: 16)
        let attributes: [NSAttributedString.Key: Any] = [.font: font]
        
        let ingredientSize = (ingredient as NSString).size(withAttributes: attributes)
        let quantitySize = (quantity as NSString).size(withAttributes: attributes)
        
        let dotsCount = (totalWidth - Int(ingredientSize.width) - Int(quantitySize.width)) / 5
        let dots = String(repeating: ".", count: max(dotsCount, 0))
        
        return "\(ingredient) \(dots) \(quantity)"
    }
}
